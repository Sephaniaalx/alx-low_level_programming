!<arch>
0-isupper.c/    0           0     0     644     266       `
#include "main.h"
#include <stdio.h>
#include <unistd.h>

/**
 * _isupper - checks for uppercase character
 * @c: arguement
 *
 * Return: 1 if c is uppercase and 0 if not
 *
 */

int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}
else
{
return (0);
}
}
0-memset.c/     0           0     0     644     331       `
#include "main.h"
#include <stdio.h>

/**
 * _memset - Fills the first n bytes of the memory area
 * @s: Direction
 * @b: character which is contant
 * @n: The number of bytes to be filled.
 * Return: s.
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		*(s + i) = b;
	return (s);
}

0-strcat.c/     0           0     0     644     429       `
#include <stdio.h>
#include <string.h>
#include "main.h"

/**
 * *_strcat - concatenate 2 strings
 * @dest: a pointer to a character
 * @src: what will be changed
 *
 * Return: returns the pointer to the resulting string
 */

char *_strcat(char *dest, char *src)
{
	int j = 0;
	int i = 0;

	while (dest[i] != '\0')
	{
		i++;
	}

	while (src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}
	dest[i] = '\0';

	return (dest);
}

100-atoi.c/     0           0     0     644     567       `
#include "main.h"

/**
 * is_numerical - check if it is a digit
 * @n: Number
 * Return: If is a number, return 1 else return 0
 */
int is_numerical(unsigned int n)
{
return (n >= '0' &&  n <= '9');
}

/**
 * _atoi - convert a string to an integer
 *@s: String
 * Return: Return the num
 */
int _atoi(char *s)
{
unsigned int number, i;
int sign;

sign = 1;
number = 0;



for (i = 0; s[i] != '\0'; i++)
{
if (is_numerical(s[i]))
{
number = (s[i] - 48) + number * 10;

if (s[i + 1] == ' ')
break;
}
else if (s[i] == '-')
{
sign *= -1;
}

}

return (number *sign);


}

1-isdigit.c/    0           0     0     644     264       `
#include "main.h"
#include <stdio.h>
#include <unistd.h>

/**
 * _isdigit - this checks for digits
 *
 * @c: takes in the argument
 *
 * Return: 1 if digit and 0 if otherwise
 */
int _isdigit(int c)
{
if (c >= 48 && c <= 57)
{
return (1);
}
else
{
return (0);
}
}
1-memcpy.c/     0           0     0     644     333       `
#include "main.h"
#include <stdio.h>

/**
 * _memcpy - this function copies
 * @n: number of bytes
 * @dest: destination
 * @src: source where we are copying to
 *
 * Return: return dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     516       `
#include "main.h"
#include <stdio.h>
#include <string.h>
#include <unistd.h>

/**
 * *_strncat - function to cocantenate 2 strings
 * @dest: destination after concatenatiom
 * @src: source
 * @n: the number of characters you want to print
 *
 * Return: a pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0;

	int j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';

	return (dest);
}
2-strchr.c/     0           0     0     644     270       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - locates a character
 * @c: the character
 * @s: the location
 * Return: value of character
 */
char *_strchr(char *s, char c)
{
int i;

for (i = 0; s[i]; i++)
{
if (s[i] == c)
{
return (s + i);
}
}
return (NULL);
}
2-strlen.c/     0           0     0     644     240       `
#include "main.h"
#include <stdio.h>
#include <unistd.h>

/**
 * _strlen - representing the string length
 * @s: address of pointer
 *
 * Return: nothing
 */
int _strlen(char *s)
{
int u;

u = 0;
while (s[u] != '\0')
{
u++;
}
return (u);
}
2-strncpy.c/    0           0     0     644     449       `
#include "main.h"
#include <string.h>
#include <stdio.h>

/**
 * *_strncpy - this is the function that copies the string to its destination
 * @dest: the destination
 * @src: the source
 * @n: the size of the destination
 * Return: returns destination
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	for (i = 0; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}

3-islower.c/    0           0     0     644     284       `
#include "main.h"
#include <stdio.h>
#include <unistd.h>

/**
 * _islower - function prints the lower character
 *@c: the lower case character
 * Return: 1 if _islower is low  but 0 if not
 *
 */

int _islower(int c)
{

if (c > 'a' && c <= 'z')
{
return (1);
}
else
{
return (0);
}
}
3-puts.c/       0           0     0     644     262       `
#include "main.h"
/**
*_puts - prints a string
*@str: A pointer to an int that will be changed
*
*Return: void which means our answer is correct
*/

void _puts(char *str)
{
char *c;
int m;

c = str;

for (m = 0; c[m]; m++)
{
_putchar (c[m]);
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     398       `
#include "main.h"
#include <stdio.h>
#include <unistd.h>
#include <string.h>
/**
 * _strcmp - function that compares the string
 * @s1: first address being compared
 * @s2: second address being compared
 *
 * Return: returns 0 when same
 */
int _strcmp(char *s1, char *s2)
{
int i;

for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
{
if (s1[i] != s2[i])
{
return (s1[i] - s2[i]);
}
}
return (0);
}
3-strspn.c/     0           0     0     644     486       `
#include "main.h"
#include <stdio.h>
#include <unistd.h>
#include <string.h>

/**
 * _strspn - function that gets the length
 * @s: the string
 * @accept: this is the comparison word
 *
 * Return: it returns count
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j, count = 0;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
			{
				count++;
				break;
			}
		}
		if (s[i] != accept[j])
		{
			break;
		}
	}
	return (count);
}
4-isalpha.c/    0           0     0     644     326       `
#include "main.h"
#include <stdio.h>
#include <unistd.h>

/**
 * _isalpha - the function that checks for alphabetic characters
 * @c: the character
 *
 * Return: returns 1 if c is lower or upper but 0 if not
 */

int _isalpha(int c)
{
if ((c > 'a' && c <= 'z') || (c > 'A' && c <= 'Z'))
{
return (1);
}
else
{
return (0);
}
}
4-strpbrk.c/    0           0     0     644     591       `
#include "main.h"
#include <stdio.h>
#include <unistd.h>

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: string
 * @accept: substring
 *
 * Description: locates the first occurrence in the string s
 *		of any of the bytes in the string accept
 *
 * Return: a pointer to the byte in s that matches one of
 *		the bytes in accept, or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
			{
				return (s + i);
			}
		}
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     604       `
#include "main.h"
#include <stdio.h>
#include <unistd.h>

/**
 * _strstr - first occurrence of the substring needle in the string haystack
 * @haystack: main str to be examined
 * @needle: searched in haystack
 * Return: return 0
 **/

char  *_strstr(char *haystack, char *needle)
{
	char *str1, *str2; /*Declaring variables*/

	while (*haystack != '\0')
	{
		str1 = haystack; /*values*/
		str2 = needle;

		/*Star WHILE*/
		while (*haystack != '\0' && *str2 != '\0' && *haystack == *str2)
		{
			haystack++;
			str2++;
		}
		if (*str2 == '\0')
			return (str1);
		haystack = str1 + 1;
	}
	return (0);
}
6-abs.c/        0           0     0     644     272       `
#include "main.h"
#include <stdio.h>
#include <unistd.h>

/**
 * _abs - function that prints absolute value
 * @n: this is the argument
 *
 * Return: 0
 *
 */

int _abs(int n)
{

if (n < 0)
{
return (n * (-1));
}

else if (n == 0)
{
return (0);
}

else
{
return (n);
}

}
9-strcpy.c/     0           0     0     644     330       `
#include "main.h"
/**
 *_strcpy - copies the string pointed to by src
 *@dest: A pointer to a char that will be changed
 *@src: A pointer to a char that will be changed
 *Return: dest
 */

char *_strcpy(char *dest, char *src)
{

int i;

i = 0;

while (src[i] != '\0')
{
dest[i] = src[i];
i++;
}
dest[i] = '\0';

return (dest);

}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

